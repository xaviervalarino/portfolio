#!/usr/bin/env node

/*
 * Create Project List
 * :::::::::::::::::::
 *
 * What it does:
 * Iterates through markdown files in `dir`,
 * capturing the first couple of lines of YAML
 * which is then used to create an list for `outfile`
 *
 * Why?
 * If the title or subtitle of a file changes, it has to be changed
 * in two places. This automates that process.
 *
 * Note: must be run from project root!
 */

// Change current working directory to project root
// process.chdir('../')

const fs = require('fs');
const paths = {
  src: process.cwd() + '/src',
  dir: '/case-studies/',
}
paths.siteFile = paths.src + '/work.md'
paths.dataFile = paths.src + paths.dir + '.project-list.yml'

// An array of objects,
// each obj containing file 'title', 'subtitle', 'position' and 'href'
let fileList = [];

fs.readdir( (paths.src + paths.dir), (err, files) => {
  if (err) {
    console.log(err);
    process.exit(1);
  }
  files.forEach( (file, i) => {
    let last = false;
    // last file
    if ( files.length - 1 ===  i) {
      last = true;  
    }
    if ( file.split('.')[1] === 'md' ) {
      // streamFile(file)
      streamFile( file, last )
    }
  });
});

// change `.md` to `.html`
function createHref (file) {
  file = file.substr(0, file.lastIndexOf(".")) + ".html";
  return paths.dir + file;
}

// change strings into key/value pairs 
function massageData (data) {
  const obj = {};
  data.split('\n').slice(1,4)
   .forEach(textline => {
     const entry = textline.split(/: */)
     obj[ entry[0] ] = entry [1];
   });
  return obj;
}

// read the first couple of lines of the file
// convert it into an object and record it into the `fileList` array
function streamFile (file, lastFile) {
  const filepath = paths.src + paths.dir + file;
  const stream = fs.createReadStream(filepath, {
    highWaterMark: 150,
  });
  let fileInfo;
  let data = '';

  stream.on('data', (chunk) => {
    data += chunk;
    stream.destroy();
    fileInfo = massageData(data);
    fileInfo.href = createHref(file);
    fileList.push( fileInfo );
  });
  stream.on('close', () => {
    if ( lastFile ) writeOut();
  });
}
function writeOut () {
  // last bit of massaging
  fileList = fileList
    .filter( fileList => {
      return !isNaN( parseFloat(fileList.position) )
    })
    .sort( (prev, next) => {
      return prev.position - next.position 
    })
  ;
  writeFiles(writeYAML(fileList))
}

function writeYAML (fileList) {
  let output = 'projects:\n'
  fileList.forEach(obj => {
    Object.keys(obj).forEach( (key, i) => {
      // the dash allows Pandoc template to iterate through the list
      let space = '    - ';
      if( i !== 0 ) { space = '      '; };
      output += `${space}${key}: ${obj[key]}\n`;
    })
  })
  return output;
}

function siteFileInfo () {
  //TODO: there has got to be an easy way to have this indented
  return `---
# Generated by \`${__filename.substring(process.cwd().length + 1)}\`
# ${new Date()}
title: Case Studies
template: work.html
masthead:
    work: true
id: case-studies
`;
}

function writeFiles(list) {
  const dataFile = fs.createWriteStream(paths.dataFile)
  const siteFile = fs.createWriteStream(paths.siteFile)

  dataFile.write('---\n')
  dataFile.write(list)
  dataFile.write('...')

  siteFile.write(siteFileInfo())
  siteFile.write(list)
  siteFile.write('---')

  console.log(`
  Files written:
    ${paths.siteFile}
    ${paths.dataFile}

  List created:
    ${list}
  `);

}
